<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <sectionGroup name="maestrano">
      <section name="app" type="Maestrano.Configuration.App, Maestrano"/>
      <section name="sso" type="Maestrano.Configuration.Sso, Maestrano"/>
      <section name="api" type="Maestrano.Configuration.Api, Maestrano"/>
      <sectionGroup name="webhook">
        <section name="account" type="Maestrano.Configuration.WebhookAccount, Maestrano"/>
      </sectionGroup>
    </sectionGroup>
    <sectionGroup name="sometenant">
      <section name="app" type="Maestrano.Configuration.App, Maestrano"/>
      <section name="sso" type="Maestrano.Configuration.Sso, Maestrano"/>
      <section name="api" type="Maestrano.Configuration.Api, Maestrano"/>
      <sectionGroup name="webhook">
        <section name="account" type="Maestrano.Configuration.WebhookAccount, Maestrano"/>
      </sectionGroup>
    </sectionGroup>
    <section name="maestranoDevPlatform" type="Maestrano.Configuration.DevPlatform, Maestrano"/>
  </configSections>

  <maestrano>
    <!--
      ===> App Configuration
      
      => environment
      The environment to connect to.
      Accepted values are: 
      - production: actual Maestrano production environment
      - production-sandbox: production-like environment to use in your UAT/staging environment
      - development: direct requests to our development sandbox (http://api-sandbox.maestrano.io)
      - test: same as development (deprecated)
      
      => host
      This is your application host (e.g: my-app.com) which is ultimately
      used to redirect users to the right SAML url during SSO handshake.
    -->
    <app environment="development" host="http://localhost"/>


    <!--
      ===> Api Configuration
    
      => id and key
      Your application App ID and API key which you can retrieve on http://maestrano.com
      via your cloud partner dashboard.
      For testing you can retrieve/generate an api.id and api.key from the API Sandbox directly 
      on http://api-sandbox.maestrano.io
    -->
    <api id="prod_or_sandbox_app_id" key="prod_or_sandbox_api_key"/>


    <!--
      ===> SSO Configuration
    
      => enabled
      Enable/Disable single sign-on. When troubleshooting authentication issues
      you might want to disable SSO temporarily
      
      => sloEnabled
      Enable/Disable single logout. When troubleshooting authentication issues
      you might want to disable SLO temporarily.
      If set to false then Maestrano.SSO.Session#IsValid - which should be
      used in a controller action filter to check user session - always return true
      
      => idm
      By default we consider that the domain managing user identification
      is the same as your application host (see above config.app.host parameter)
      If you have a dedicated domain managing user identification and therefore
      responsible for the single sign-on handshake (e.g: https://idp.my-app.com)
      then you can specify it below
      
      => initPath
      This is your application path to the SAML endpoint that allows users to
      initialize SSO authentication. Upon reaching this endpoint users your
      application will automatically create a SAML request and redirect the user
      to Maestrano. Maestrano will then authenticate and authorize the user. Upon
      authorization the user gets redirected to your application consumer endpoint
      (see below) for initial setup and/or login.
      
      => consumePath
      This is your application path to the SAML endpoint that allows users to
      finalize SSO authentication. During the 'consume' action your application
      sets users (and associated group) up and/or log them in.
      
      => creationMode
      !IMPORTANT
      On Maestrano users can take several "instances" of your service. You can consider
      each "instance" as 1) a billing entity and 2) a collaboration group (this is
      equivalent to a 'customer account' in a commercial world). When users login to
      your application via single sign-on they actually login via a specific group which
      is then supposed to determine which data they have access to inside your application.
  
      E.g: John and Jack are part of group 1. They should see the same data when they login to
      your application (employee info, analytics, sales etc..). John is also part of group 2 
      but not Jack. Therefore only John should be able to see the data belonging to group 2.
  
      In most application this is done via collaboration/sharing/permission groups which is
      why a group is required to be created when a new user logs in via a new group (and 
      also for billing purpose - you charge a group, not a user directly). 
  
      - mode: 'real'
      In an ideal world a user should be able to belong to several groups in your application.
      In this case you would set the 'sso.creation_mode' to 'real' which means that the uid
      and email we pass to you are the actual user email and maestrano universal id.
  
      - mode: 'virtual'
      Now let's say that due to technical constraints your application cannot authorize a user
      to belong to several groups. Well next time John logs in via a different group there will
      be a problem: the user already exists (based on uid or email) and cannot be assigned 
      to a second group. To fix this you can set the 'sso.creation_mode' to 'virtual'. In this
      mode users get assigned a truly unique uid and email across groups. So next time John logs
      in a whole new user account can be created for him without any validation problem. In this
      mode the email we assign to him looks like "usr-sdf54.cld-45aa2@mail.maestrano.com". But don't
      worry we take care of forwarding any email you would send to this address
    -->
    <!--
    <sso
      enabled="true"
      sloEnabled="true"
      idm="https://idp.myapp.com"
      initPath="/maestrano/auth/saml/init.aspx"
      consumePath="/maestrano/auth/saml/consume"
      creationMode="virtual"
      />
     -->


    <!--
      ===> Account Webhooks
      Here you can configure various notification endpoints related to service cancellation  
      (account/user deletion) as well as Connec!™ entities updates.
      
    -->
    <webhook>
      <!--
      Single sign on has been setup into your app and Maestrano users are now able
      to use your service. Great! Wait what happens when a business (group) decides to 
      stop using your service? Also what happens when a user gets removed from a business?
      Well the endpoints below are for Maestrano to be able to notify you of such
      events.

      Even if the routes look restful we issue only issue DELETE requests for the moment
      to notify you of any service cancellation (group deletion) or any user being
      removed from a group.
      <account
        groupsPath="/maestrano/account/groups/:id"
        groupUsersPath="/maestrano/account/groups/:group_id/users/:id"
        />
       -->

      <!--
      This is the path were Connec!™ should post notifications
      <connec
        notificationsPath="/maestrano/connec/notifications"
        />
       -->

      <!--
      This is the list of Connec!™ entities for which you want to
      receive updates
      <connecSubscriptions
        accounts: false,
        company: false,
        invoices: false,
        items: false,
        organizations: false,
        people: false,
        taxCodes: false,
        taxRates: false
        />
       -->

    </webhook>
  </maestrano>


  <sometenant>
    <app environment="production" host="http://myapp.com"/>
    <api id="tenant_app_id" key="prod_or_sandbox_api_key"/>

    <sso enabled="true" sloEnabled="true" idm="https://idm.myapp.com" idp="https://idp.sometenant.com" initPath="/sometenant/auth/saml/init.aspx" consumePath="/sometenant/auth/saml/consume" creationMode="virtual"/>
    <webhook>
    </webhook>
  </sometenant>

  <maestranoDevPlatform
    host="https://wrong-url.com"
    apiPath="/and-wrong-path/too"
  >
    <environment
      name="[your environment nid]"
      apiKey="[your environment key]"
      apiSecret="[your environment secret]"
    />

  </maestranoDevPlatform>

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral"/>
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="8.0.3.0"/>
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5"/>
  </startup>
</configuration>
